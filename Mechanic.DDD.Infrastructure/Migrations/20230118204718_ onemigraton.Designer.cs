// <auto-generated />
using System;
using Mechanic.DDD.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mechanic.DDD.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230118204718_ onemigraton")]
    partial class onemigraton
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Dueno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cedula")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroTelefono")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Dueños");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Mecanico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cedula")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FechaNacimiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NivelEstudio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroTelefono")
                        .HasColumnType("int");

                    b.Property<int>("ServicioForeiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicioForeiId")
                        .IsUnique();

                    b.ToTable("Mecanicos");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Repuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Precio")
                        .HasColumnType("int");

                    b.Property<int>("ServicioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicioId");

                    b.ToTable("Repuestos");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaRev")
                        .HasColumnType("datetime2");

                    b.Property<int>("Nivelaceite")
                        .HasColumnType("int");

                    b.Property<int>("Nivelfrenos")
                        .HasColumnType("int");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cilindraje")
                        .HasColumnType("int");

                    b.Property<int>("DuenoId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DuenoId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Mecanico", b =>
                {
                    b.HasOne("Mechanic.DDD.Domain.Entities.Servicio", "Servicio")
                        .WithOne("Mecanico")
                        .HasForeignKey("Mechanic.DDD.Domain.Entities.Mecanico", "ServicioForeiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Repuesto", b =>
                {
                    b.HasOne("Mechanic.DDD.Domain.Entities.Servicio", "Servicio")
                        .WithMany("Repuestos")
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Servicio", b =>
                {
                    b.HasOne("Mechanic.DDD.Domain.Entities.Vehiculo", "Vehiculo")
                        .WithMany("Servicios")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Vehiculo", b =>
                {
                    b.HasOne("Mechanic.DDD.Domain.Entities.Dueno", "Dueno")
                        .WithMany("Vehiculos")
                        .HasForeignKey("DuenoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dueno");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Dueno", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Servicio", b =>
                {
                    b.Navigation("Mecanico")
                        .IsRequired();

                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("Mechanic.DDD.Domain.Entities.Vehiculo", b =>
                {
                    b.Navigation("Servicios");
                });
#pragma warning restore 612, 618
        }
    }
}
